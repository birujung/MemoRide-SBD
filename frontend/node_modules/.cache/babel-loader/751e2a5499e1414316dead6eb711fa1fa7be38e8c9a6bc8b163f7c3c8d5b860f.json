{"ast":null,"code":"import axios from 'axios';\nimport { BASE_URL } from '../utils/config';\nimport { useDispatch } from 'react-redux';\n\n// Action types\nexport const LOGIN_START = 'LOGIN_START';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const LOGOUT = 'LOGOUT';\n\n// Login action\nexport const login = loginData => {\n  return async dispatch => {\n    dispatch({\n      type: LOGIN_START\n    });\n    try {\n      // Perform login request\n      const response = await axios.post(`${BASE_URL}/auth/login`, loginData);\n\n      // Handle successful login\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: response.data.user\n      });\n\n      // You can also store the authentication token or perform other necessary operations here\n    } catch (error) {\n      // Handle login failure\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\n\n// Register action\nexport const register = registerData => {\n  return async dispatch => {\n    dispatch({\n      type: LOGIN_START\n    });\n    try {\n      // Perform registration request\n      const response = await axios.post(`${BASE_URL}/auth/register`, registerData);\n\n      // Handle successful registration\n      dispatch({\n        type: REGISTER_SUCCESS\n      });\n      // You can perform any additional actions after successful registration\n    } catch (error) {\n      // Handle registration failure\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\n\n// Logout action\nexport const logout = () => {\n  return dispatch => {\n    // Handle logout\n    dispatch({\n      type: LOGOUT\n    });\n    // You can also clear the authentication token or perform other necessary operations here\n  };\n};","map":{"version":3,"names":["axios","BASE_URL","useDispatch","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_SUCCESS","LOGOUT","login","loginData","dispatch","type","response","post","payload","data","user","error","message","register","registerData","logout"],"sources":["/Users/tunjung/coding/MemoRide-SBD/frontend/src/context/AuthController.js"],"sourcesContent":["import axios from 'axios';\nimport { BASE_URL } from '../utils/config';\nimport { useDispatch } from 'react-redux';\n\n// Action types\nexport const LOGIN_START = 'LOGIN_START';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const LOGOUT = 'LOGOUT';\n\n// Login action\nexport const login = (loginData) => {\n  return async (dispatch) => {\n    dispatch({ type: LOGIN_START });\n\n    try {\n      // Perform login request\n      const response = await axios.post(`${BASE_URL}/auth/login`, loginData);\n\n      // Handle successful login\n      dispatch({ type: LOGIN_SUCCESS, payload: response.data.user });\n      \n      // You can also store the authentication token or perform other necessary operations here\n    } catch (error) {\n      // Handle login failure\n      dispatch({ type: LOGIN_FAILURE, payload: error.message });\n    }\n  };\n};\n\n// Register action\nexport const register = (registerData) => {\n  return async (dispatch) => {\n    dispatch({ type: LOGIN_START });\n\n    try {\n      // Perform registration request\n      const response = await axios.post(`${BASE_URL}/auth/register`, registerData);\n\n      // Handle successful registration\n      dispatch({ type: REGISTER_SUCCESS });\n      // You can perform any additional actions after successful registration\n    } catch (error) {\n      // Handle registration failure\n      dispatch({ type: LOGIN_FAILURE, payload: error.message });\n    }\n  };\n};\n\n// Logout action\nexport const logout = () => {\n  return (dispatch) => {\n    // Handle logout\n    dispatch({ type: LOGOUT });\n    // You can also clear the authentication token or perform other necessary operations here\n  };\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,MAAM,GAAG,QAAQ;;AAE9B;AACA,OAAO,MAAMC,KAAK,GAAIC,SAAS,IAAK;EAClC,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAER;IAAY,CAAC,CAAC;IAE/B,IAAI;MACF;MACA,MAAMS,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAE,GAAEZ,QAAS,aAAY,EAAEQ,SAAS,CAAC;;MAEtE;MACAC,QAAQ,CAAC;QAAEC,IAAI,EAAEP,aAAa;QAAEU,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC;MAAK,CAAC,CAAC;;MAE9D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAP,QAAQ,CAAC;QAAEC,IAAI,EAAEN,aAAa;QAAES,OAAO,EAAEG,KAAK,CAACC;MAAQ,CAAC,CAAC;IAC3D;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAIC,YAAY,IAAK;EACxC,OAAO,MAAOV,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAER;IAAY,CAAC,CAAC;IAE/B,IAAI;MACF;MACA,MAAMS,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAE,GAAEZ,QAAS,gBAAe,EAAEmB,YAAY,CAAC;;MAE5E;MACAV,QAAQ,CAAC;QAAEC,IAAI,EAAEL;MAAiB,CAAC,CAAC;MACpC;IACF,CAAC,CAAC,OAAOW,KAAK,EAAE;MACd;MACAP,QAAQ,CAAC;QAAEC,IAAI,EAAEN,aAAa;QAAES,OAAO,EAAEG,KAAK,CAACC;MAAQ,CAAC,CAAC;IAC3D;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMG,MAAM,GAAGA,CAAA,KAAM;EAC1B,OAAQX,QAAQ,IAAK;IACnB;IACAA,QAAQ,CAAC;MAAEC,IAAI,EAAEJ;IAAO,CAAC,CAAC;IAC1B;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}