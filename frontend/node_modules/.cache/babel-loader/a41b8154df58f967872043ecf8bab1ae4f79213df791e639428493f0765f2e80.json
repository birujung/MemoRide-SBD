{"ast":null,"code":"import axios from 'axios';\nimport { BASE_URL } from '../utils/config';\n\n// Action types\nexport const LOGIN_START = 'LOGIN_START';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const LOGOUT = 'LOGOUT';\n\n// Login action\nexport const login = (setUser, loginData) => {\n  return axios.post(`${BASE_URL}/auth/login`, loginData).then(response => {\n    // Handle successful login\n    console.log(response.data);\n    const token = response.data.token; // Access the token property from the response\n    const userData = response.data.data; // Access user data from the response\n    setUser(userData);\n\n    // Save the token in the localStorage\n    console.log(userData.token); // Verify the value of the token\n    localStorage.setItem('token');\n    return userData;\n  }).catch(error => {\n    // Handle login failure\n    throw error;\n  });\n};\n\n// Get token when Login\nexport const getToken = () => {\n  const token = localStorage.getItem(\"token\");\n  return token;\n};\n\n// Register action\nexport const register = (setUser, registerData) => {\n  return axios.post(`${BASE_URL}/auth/register`, registerData).then(response => {\n    // Handle successful registration\n    console.log(response.data);\n    const userData = response.data.data; // Access user data from the response\n    setUser(userData);\n    return userData;\n  }).catch(error => {\n    // Handle registration failure\n    throw error;\n  });\n};\n\n// Logout action\nexport const logout = dispatch => {\n  if (typeof dispatch === \"function\") {\n    // Handle logout\n    dispatch({\n      type: LOGOUT\n    });\n    // You can also clear the authentication token or perform other necessary operations here\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_SUCCESS","LOGOUT","login","setUser","loginData","post","then","response","console","log","data","token","userData","localStorage","setItem","catch","error","getToken","getItem","register","registerData","logout","dispatch","type"],"sources":["/Users/tunjung/coding/MemoRide-SBD/frontend/src/context/AuthController.js"],"sourcesContent":["import axios from 'axios';\nimport { BASE_URL } from '../utils/config';\n\n// Action types\nexport const LOGIN_START = 'LOGIN_START';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const LOGOUT = 'LOGOUT';\n\n// Login action\nexport const login = (setUser, loginData) => {\n  return axios\n    .post(`${BASE_URL}/auth/login`, loginData)\n    .then((response) => {\n      // Handle successful login\n      console.log(response.data);\n      const token = response.data.token; // Access the token property from the response\n      const userData = response.data.data; // Access user data from the response\n      setUser(userData);\n\n      // Save the token in the localStorage\n      console.log(userData.token); // Verify the value of the token\n      localStorage.setItem('token', );\n\n      return userData;\n    })\n    .catch((error) => {\n      // Handle login failure\n      throw error;\n    });\n};\n\n// Get token when Login\nexport const getToken = () => {\n  const token = localStorage.getItem(\"token\");\n  return token;\n};\n\n// Register action\nexport const register = (setUser, registerData) => {\n  return axios\n    .post(`${BASE_URL}/auth/register`, registerData)\n    .then((response) => {\n      // Handle successful registration\n      console.log(response.data);\n      const userData = response.data.data; // Access user data from the response\n      setUser(userData);\n      return userData;\n    })\n    .catch((error) => {\n      // Handle registration failure\n      throw error;\n    });\n};\n\n// Logout action\nexport const logout = (dispatch) => {\n  if (typeof dispatch === \"function\") {\n    // Handle logout\n    dispatch({ type: LOGOUT });\n    // You can also clear the authentication token or perform other necessary operations here\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,iBAAiB;;AAE1C;AACA,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,MAAM,GAAG,QAAQ;;AAE9B;AACA,OAAO,MAAMC,KAAK,GAAGA,CAACC,OAAO,EAAEC,SAAS,KAAK;EAC3C,OAAOT,KAAK,CACTU,IAAI,CAAE,GAAET,QAAS,aAAY,EAAEQ,SAAS,CAAC,CACzCE,IAAI,CAAEC,QAAQ,IAAK;IAClB;IACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC1B,MAAMC,KAAK,GAAGJ,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAC,CAAC;IACnC,MAAMC,QAAQ,GAAGL,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC;IACrCP,OAAO,CAACS,QAAQ,CAAC;;IAEjB;IACAJ,OAAO,CAACC,GAAG,CAACG,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC;IAC7BE,YAAY,CAACC,OAAO,CAAC,OAAS,CAAC;IAE/B,OAAOF,QAAQ;EACjB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;IAChB;IACA,MAAMA,KAAK;EACb,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,MAAMN,KAAK,GAAGE,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOP,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMQ,QAAQ,GAAGA,CAAChB,OAAO,EAAEiB,YAAY,KAAK;EACjD,OAAOzB,KAAK,CACTU,IAAI,CAAE,GAAET,QAAS,gBAAe,EAAEwB,YAAY,CAAC,CAC/Cd,IAAI,CAAEC,QAAQ,IAAK;IAClB;IACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC1B,MAAME,QAAQ,GAAGL,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC;IACrCP,OAAO,CAACS,QAAQ,CAAC;IACjB,OAAOA,QAAQ;EACjB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;IAChB;IACA,MAAMA,KAAK;EACb,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAMK,MAAM,GAAIC,QAAQ,IAAK;EAClC,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAClC;IACAA,QAAQ,CAAC;MAAEC,IAAI,EAAEtB;IAAO,CAAC,CAAC;IAC1B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}