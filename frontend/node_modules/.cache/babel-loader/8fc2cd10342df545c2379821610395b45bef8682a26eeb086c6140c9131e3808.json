{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        console.log(\"Fetching data from:\", url);\n        const res = await fetch(url);\n        if (!res.ok) {\n          setError('Failed to fetch');\n          console.error(\"Fetch request error:\", res.status, res.statusText);\n          alert('Failed to fetch');\n        } else {\n          const result = await res.json();\n          console.log(\"Fetched data:\", result.data);\n          setData(result.data);\n          setLoading(false);\n        }\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n        console.error(\"Fetch request error:\", err);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    error,\n    loading\n  };\n};\n_s(useFetch, \"malMnQdwM2qcKJJQledZbUt2mHk=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","error","setError","loading","setLoading","fetchData","console","log","res","fetch","ok","status","statusText","alert","result","json","err","message"],"sources":["/Users/tunjung/coding/MemoRide-SBD/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n\n      try {\n        console.log(\"Fetching data from:\", url);\n        const res = await fetch(url);\n\n        if (!res.ok) {\n          setError('Failed to fetch');\n          console.error(\"Fetch request error:\", res.status, res.statusText);\n          alert('Failed to fetch');\n        } else {\n          const result = await res.json();\n          console.log(\"Fetched data:\", result.data);\n          setData(result.data);\n          setLoading(false);\n        }\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n        console.error(\"Fetch request error:\", err);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return {\n    data,\n    error,\n    loading,\n  };\n};\n\nexport default useFetch;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BD,UAAU,CAAC,IAAI,CAAC;MAEhB,IAAI;QACFE,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEV,GAAG,CAAC;QACvC,MAAMW,GAAG,GAAG,MAAMC,KAAK,CAACZ,GAAG,CAAC;QAE5B,IAAI,CAACW,GAAG,CAACE,EAAE,EAAE;UACXR,QAAQ,CAAC,iBAAiB,CAAC;UAC3BI,OAAO,CAACL,KAAK,CAAC,sBAAsB,EAAEO,GAAG,CAACG,MAAM,EAAEH,GAAG,CAACI,UAAU,CAAC;UACjEC,KAAK,CAAC,iBAAiB,CAAC;QAC1B,CAAC,MAAM;UACL,MAAMC,MAAM,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;UAC/BT,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEO,MAAM,CAACf,IAAI,CAAC;UACzCC,OAAO,CAACc,MAAM,CAACf,IAAI,CAAC;UACpBK,UAAU,CAAC,KAAK,CAAC;QACnB;MACF,CAAC,CAAC,OAAOY,GAAG,EAAE;QACZd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;QACrBb,UAAU,CAAC,KAAK,CAAC;QACjBE,OAAO,CAACL,KAAK,CAAC,sBAAsB,EAAEe,GAAG,CAAC;MAC5C;IACF,CAAC;IAEDX,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,OAAO;IACLE,IAAI;IACJE,KAAK;IACLE;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CAtCIF,QAAQ;AAwCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}